[{"categories":null,"content":"为什么要搭建自己的博客呢？ 契机 对博文做个备份。 C2H5OC2H5 好萌 ","date":"2022-07-27","objectID":"/posts/%E5%85%B3%E4%BA%8E%E6%88%91/:0:0","tags":null,"title":"写在前面","uri":"/posts/%E5%85%B3%E4%BA%8E%E6%88%91/"},{"categories":null,"content":"测试manjaro系统 ","date":"2022-11-24","objectID":"/posts/%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95/:0:0","tags":null,"title":"更新测试","uri":"/posts/%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95/"},{"categories":["折腾"],"content":"github项目地址：https://github.com/abraunegg/onedrive，感谢开发者。 # sudo add-apt-repository ppa:yann1ck/onedrive 可能暂不需要，源更新时出错 : 仓库 “https://ppa.launchpadcontent.net/yann1ck/onedrive/ubuntu kinetic Release” 没有 Release 文件。 N: 无法安全地用该源进行更新，所以默认禁用该源。 N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。 查看源：cd /etc/apt/sources.list.d/ sudo su rm -r 文件名，首字+tab补全 sudo apt-get update sudo apt-get install onedrive ","date":"2022-11-21","objectID":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85onedrive/:0:0","tags":["Ubuntu"],"title":"Ubuntu上安装onedrive","uri":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85onedrive/"},{"categories":["折腾"],"content":"使用 在命令行中输入 onedrive 弹出链接，复制到浏览器中，输入账号和密码等待跳转完成，把浏览器地址框的地址复制到命令行中，回车完成账号认证。 onedrive的文件目录位于$home/OneDrive ","date":"2022-11-21","objectID":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85onedrive/:0:1","tags":["Ubuntu"],"title":"Ubuntu上安装onedrive","uri":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85onedrive/"},{"categories":["折腾"],"content":"命令介绍 onedrive --synchronize 同步onedrive中的所有内容，同步完账号退出。这个客户端会把所有内容都下载到本地，与微软的先预存一个快照，到使用的时候再下载不同。 onedrive -m m意思是monitor，同步完程序也不退出，继续监听新的变更。 onedrive --download-only --synchronize 本地的onedrive程序仅从微软服务器下载onedrive中的改变，否则，onedrive把内容删除了，而本地的onedrive目录还有，这会导致再次把本地目录中的内容再次传到服务器上。 因此，一个保险的做法是，先进行下载同步，再进行上传同步。 ","date":"2022-11-21","objectID":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85onedrive/:0:2","tags":["Ubuntu"],"title":"Ubuntu上安装onedrive","uri":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85onedrive/"},{"categories":["折腾"],"content":"服务(有了onedrive -m 貌似不需要了) systemctl --user enable onedrive systemctl --user start onedrive 这样设置成功后就可以不用管它了。后台作为一个服务自动处理。棒棒哒。 不要轻易在云端和本地全部删除文件来实现云端和本地文件一致，软件本身自己会完成两者同步。删除任意一端另一端也会删除，不会有提示，windows端删除时会弹窗提醒。 另，如果误删千万不要清空回收站！千万不要清空回收站！千万不要清空回收站！","date":"2022-11-21","objectID":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85onedrive/:0:3","tags":["Ubuntu"],"title":"Ubuntu上安装onedrive","uri":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85onedrive/"},{"categories":["折腾"],"content":"1、下载好typora0.11.8软件，用软件商店打开安装。 2、禁止软件升级：sudo apt-mark hold typora 3、在ubuntu的 “软件和更新中”禁用源。 ","date":"2022-11-21","objectID":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%97%A7%E7%89%88%E6%9C%ACtypora/:0:0","tags":["Ubuntu"],"title":"旧版本Typora在Ubuntu上安装和使用","uri":"/posts/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%97%A7%E7%89%88%E6%9C%ACtypora/"},{"categories":null,"content":"sm.ms图床好像用不了了，还是把图床放在github外加CDN加速靠谱一些。 一、在github上创建一个公开仓库作为图床 二、创建一个github token，登陆这个网站https://picx.xpoet.cn/，点击登陆，在框框里粘贴你的github token，然后选择你创建作为图床的仓库即可。 ","date":"2022-11-19","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%94%E5%9B%BE%E5%BA%8A%E9%80%89%E6%8B%A9/:0:0","tags":["博客"],"title":"博客搭建五：图床选择","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%94%E5%9B%BE%E5%BA%8A%E9%80%89%E6%8B%A9/"},{"categories":["折腾"],"content":"新版的ubuntu22.04LTS(ubuntu22.10)异常地好用，在设置里简单设置一下外观，界面就很Mac风，想尝试ubuntu的小伙伴可以入手了。 网上很多实现科学上网的教程纷繁芜杂，大多都是需要敲击N多命令，对初入ubuntu的小伙伴实在是不友好，能够安装成功也就罢了，但是到最后大概率会安装失败就很闹心（可能是一些依赖库与新版本不兼容）。 在ubuntu上，现阶段实现科学上网最简单的办法是使用Clash代理软件。 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:0","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"1、从github上搜索clash for windows 搜索结果的第一条就是（见下图），github时不时抽风，如果github登不上去，这里放上天翼云盘所需文件链接：https://cloud.189.cn/web/share?code=77faqenQ3EZj（访问码：ecl2） 如果需要最新版，还是要进github里下载。 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:1","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"2、进去后点击Releases ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:2","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"3、下载Clash.for.Windows-0.20.7-x64-linux.tar.gz即可 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:3","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"4、文件下载后，右键文件将文件解压到一个你喜欢的文件夹里（不需要使用linux的命令） 文件解压完后，打开这个文件夹，然后右键\u003e在终端打开 到这一步后我们可以看到第一行cfw文件，此时它已经具有可执行权限（是的，在配置Qv2ray时涉及到配置可执行权限）。输入ls -all cfw可查看是否具有可执行权限，输入chmod +x cfw可给cfw加上可执行权限。 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:4","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"5、输入 ./cfw 就会打开Clash软件（出现一只小猫猫） 勾选start with linux就可以开机启动，不用每次输命令启动。 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:5","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"6、点击Profiles，在上面那个框框里输入Clash订阅链接，然后Download即可 关于订阅链接如何获取各位仁者见仁，智者见智。（小贴士：有的订阅链接可能需要科学上网才能下载，啊这，我都能科学上网了，还订阅你链接干啥\u003c_\u003c）Download成功后，点击某一个标签，带绿杠表示激活使用中。 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:6","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"7、点击Proxies，选择延迟低的进行连接 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:7","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"8、最后一步，在ubuntu系统的设置里将网络设置的网络代理更改为手动 网络代理设置如下，将网络链接到端口7890（在一开始的Clash打开界面可以看到） ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:8","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"9、总结 Clash是我目前发现最简单的代理设置软件了，Qv2ray、v2rayl等等软件配置起来需要各种命令、各种库，安装起来太搞人心态了。 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:9","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"Ubuntu用来干吗？ 尝试下新鲜事物，用来写写博客。在ubuntu里配置博客部署到github简直不要太方便。 hugo可以在软件商店里下载，vscode里添加markdown插件写md文档很方便（小贴士：vscode下载官网上的版本，snap商店里的版本写md文档是输入不了中文）。 sudo apt install git可以把git安装好。 如何将博客部署到github上？ 将本地博客链接好github上以后，git push直接就完事了。 ","date":"2022-11-18","objectID":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/:0:10","tags":["Ubuntu"],"title":"在Ubuntu里用Windows思维安装Clash实现科学上网","uri":"/posts/ubuntu%E9%87%8C%E7%94%A8windows%E6%80%9D%E7%BB%B4%E5%AE%89%E8%A3%85clash%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"categories":["折腾"],"content":"Ubuntu版本：Ubuntu22.10,有许多新的功能使我放弃了22.04LTS版本。manjaro版本不太适合我，定制性太高，折腾起来很麻烦，我喜欢简洁但不丑陋的系统，manjaro系统每个窗口都会带有一个标题栏，使得页面多出一栏显得更拥挤。 Ubuntu这个版本就挺好的，软件多开时，点击一下它会把多个页面分布在屏幕上并且是实时动态的。当另一个软件也多开时，点击该软件它会先显示该软件最后打开的那个，再点击一下就会将所有该软件的所有列到屏幕上，需要打开哪个就选哪个，用起来s很方便。 ​ （写博客状态，十几个网页，word记录，onedrive实时同步，CPU和内存占用情况，很安静） 更新：使用期间遇到几个错误，导致系统崩溃，还是用22.04LTS版本。 博客 Typora：版本0.11.8，最后一个免费测试版，比在vscode里写舒服太多了，尽管使用插件也能达到最终目的，但是过程，嗯，用过才知道，typora真正的即见即所得。 hugo：软件库搜索安装即可。 git：sudo apt install git即可，push到github上。 Python vscode：不要从软件商店里下载，内容不能输入中文，从网站下载使用。 初学大都要使用turtle库入门，ubuntu里运行会出错，需要安装：sudo apt-get install python3-tk 后期考虑用pycharm…… 从官网下载后，解压至任意英文目录下例如snap，然后在bin文件夹内终端打开 ./pycharm.sh 启动pycharm 在左下角的设置里创建桌面条目即可创建快捷方式，snap商店里的软件真是一言难尽啊，不支持中文输如······ ","date":"2022-11-18","objectID":"/posts/ubuntu%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E5%92%8C%E8%BD%AF%E4%BB%B6%E4%BB%AC/:0:0","tags":["Ubuntu"],"title":"Ubuntu版本选择和软件们","uri":"/posts/ubuntu%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E5%92%8C%E8%BD%AF%E4%BB%B6%E4%BB%AC/"},{"categories":["折腾"],"content":"视频 vlc ","date":"2022-11-18","objectID":"/posts/ubuntu%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E5%92%8C%E8%BD%AF%E4%BB%B6%E4%BB%AC/:0:1","tags":["Ubuntu"],"title":"Ubuntu版本选择和软件们","uri":"/posts/ubuntu%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E5%92%8C%E8%BD%AF%E4%BB%B6%E4%BB%AC/"},{"categories":["折腾"],"content":"字体 Tweaks：优化软件（其中字体替换方案可以完整的体验苹方字体） 更新：系统字体还是不要轻易替换，可能是资源参差不齐，不保证完美适配。美化的尽头是默认，所以这个软件也就用不到了。 默认字体在typaro里显示的看起来更正常和舒服些。 ","date":"2022-11-18","objectID":"/posts/ubuntu%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E5%92%8C%E8%BD%AF%E4%BB%B6%E4%BB%AC/:0:2","tags":["Ubuntu"],"title":"Ubuntu版本选择和软件们","uri":"/posts/ubuntu%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E5%92%8C%E8%BD%AF%E4%BB%B6%E4%BB%AC/"},{"categories":["折腾"],"content":"听歌 Rhythmbox 两条江为什么不能在一起，因为不是河。 注意文件备份！注意文件备份！注意文件备份！ ","date":"2022-11-18","objectID":"/posts/ubuntu%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E5%92%8C%E8%BD%AF%E4%BB%B6%E4%BB%AC/:0:3","tags":["Ubuntu"],"title":"Ubuntu版本选择和软件们","uri":"/posts/ubuntu%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E5%92%8C%E8%BD%AF%E4%BB%B6%E4%BB%AC/"},{"categories":["通俗"],"content":"一、傅里叶变换 将时间转化为频率 ","date":"2022-11-12","objectID":"/posts/%E5%8D%81%E4%B8%AA%E5%85%AC%E5%BC%8F/:0:1","tags":["物理"],"title":"十个公式","uri":"/posts/%E5%8D%81%E4%B8%AA%E5%85%AC%E5%BC%8F/"},{"categories":["通俗"],"content":"二、斯涅尔定律 n:折射率 光在真空中速度与介质中速度比 ","date":"2022-11-12","objectID":"/posts/%E5%8D%81%E4%B8%AA%E5%85%AC%E5%BC%8F/:0:2","tags":["物理"],"title":"十个公式","uri":"/posts/%E5%8D%81%E4%B8%AA%E5%85%AC%E5%BC%8F/"},{"categories":["通俗"],"content":"三、dfsf ","date":"2022-11-12","objectID":"/posts/%E5%8D%81%E4%B8%AA%E5%85%AC%E5%BC%8F/:0:3","tags":["物理"],"title":"十个公式","uri":"/posts/%E5%8D%81%E4%B8%AA%E5%85%AC%E5%BC%8F/"},{"categories":["通俗"],"content":"熵到底是什么？一副牌中抽三张为同花的概率是多大？ 自然界的发展发向。 熵增理论：麦克斯韦认为宇宙的熵是有上限的，当达到上限时即热寂，宇宙会灭亡。还有些人认为宇宙是无限膨胀的，也就是熵不会达到上限。 ","date":"2022-11-11","objectID":"/posts/%E7%89%A9%E7%90%8612%E7%86%B5%E6%98%AF%E4%BB%80%E4%B9%88/:0:0","tags":["物理"],"title":"熵是什么？","uri":"/posts/%E7%89%A9%E7%90%8612%E7%86%B5%E6%98%AF%E4%BB%80%E4%B9%88/"},{"categories":["通俗"],"content":"R:red G:green B:blue #XXXXXX 16进制的数表示，0-255，每两位代表一个颜色 红: #FF0000 橙: #FF7D00 黄: #FFFF00 绿: #00FF00 青: #00FFFF 蓝: #0000FF 紫: #FF00FF ","date":"2022-11-10","objectID":"/posts/%E7%89%A9%E7%90%866%E7%94%B5%E8%84%91%E6%98%BE%E7%A4%BA%E5%99%A8%E4%B8%BA%E5%95%A5%E8%83%BD%E6%98%BE%E7%A4%BA%E8%BF%99%E4%B9%88%E5%A4%9A%E9%A2%9C%E8%89%B2/:0:0","tags":["物理"],"title":"电脑显示器为啥能显示这么多颜色？","uri":"/posts/%E7%89%A9%E7%90%866%E7%94%B5%E8%84%91%E6%98%BE%E7%A4%BA%E5%99%A8%E4%B8%BA%E5%95%A5%E8%83%BD%E6%98%BE%E7%A4%BA%E8%BF%99%E4%B9%88%E5%A4%9A%E9%A2%9C%E8%89%B2/"},{"categories":["通俗"],"content":"物理两朵乌云，源自于1900年4月27日，英国著名物理学家威廉.汤姆生（即开尔文男爵）在英国皇家学会发表了题为“在热和光动力理论上空的十九世纪的乌云”的演讲。 他在回顾物理学所取得的伟大成就时说，物理大厦已经落成，所剩只是一些修饰工作。同时，他在展望20世纪物理学前景时，却若有所思地讲道：“动力理论肯定了热和光是运动的两种方式，现在，它的美丽而晴朗的天空却被两朵乌云笼罩了，”“第一朵乌云出现在光的波动理论上，”“第二朵乌云出现在关于能量均分的麦克斯韦-玻尔兹曼理论上。 威廉.汤姆生在1900年4月曾发表过题为《19世纪热和光的动力学理论上空的乌云》的文章。他所说的第一朵乌云，主要是指迈克尔逊-莫雷实验结果和以太漂移说相矛盾；他所说的第二朵乌云，主要是指热学中的能量均分定则在气体比热以及热辐射能谱的理论解释中得出与实验不等的结果，其中尤以黑体辐射理论出现的“紫外灾难”最为突出。开尔文是19世纪英国杰出的理论物理和实验物理学家，是一位颇有影响的物理学权威，他的说法道出了物理学发展到19世纪末期的基本状况，反映了当时物理学界的主要思潮。 ","date":"2022-11-10","objectID":"/posts/%E7%89%A9%E7%90%865%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%92%8C%E7%9B%B8%E5%AF%B9%E8%AE%BA%E7%9A%84%E5%BC%80%E7%AB%AF%E6%98%AF%E4%BB%80%E4%B9%88/:0:0","tags":["物理"],"title":"量子力学和相对论的开端是什么？","uri":"/posts/%E7%89%A9%E7%90%865%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%92%8C%E7%9B%B8%E5%AF%B9%E8%AE%BA%E7%9A%84%E5%BC%80%E7%AB%AF%E6%98%AF%E4%BB%80%E4%B9%88/"},{"categories":["通俗"],"content":" 原子弹 U235达到临界体积才会发生爆炸。首先通过炸药将上部的小块U235推进到两块大的U235之间，宇宙射线中含有中子，任一中子进入到达到临界体积的U235中，引发核裂变，链式效应，雪崩，U235质量亏损，释放能量。 氢弹 氘核和氚核在原子核范围内（10的-15次方）高速撞击生成一个氦核和一个中子，这就是聚变反应，需要几百万开尔文温度下发生，因此需要一个原子弹来引爆氢弹。 氢弹的反应为什么无限进行下去？ 裂变》聚变》裂变······因为两个反应都会发生质量亏损，当二者达到铁核时裂变和聚变都会停止，因此不会无限进行下去。 太阳表面是聚变反应。 ","date":"2022-11-10","objectID":"/posts/%E7%89%A9%E7%90%864%E5%8E%9F%E5%AD%90%E5%BC%B9%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88/:0:0","tags":["物理"],"title":"原子弹的原理是什么？","uri":"/posts/%E7%89%A9%E7%90%864%E5%8E%9F%E5%AD%90%E5%BC%B9%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88/"},{"categories":null,"content":"之前一直将Blog文件夹建立在D盘内，在重装系统时经常将整个文件夹压缩后拷贝来拷贝去，每次都要重新与仓库建立连接。这次直接将整个文件夹建立在OneDrive内，重装系统后理论上Blog文件目录都不会发生改变，也不用再拷贝整个文件夹。 即使在国内OneDrive网页打开有些困难，但是客户端同步功能还是不错的，免费用户有15Gb的云空间（这个空间是实打实的空间，不是一个链接地址），对于存储博客文件应该是够用了，足够坚持很长时间。以后重要文件也可暂存在这里。 关于云盘和硬盘存储的选择，我觉得《白帽子话Web安全》的作者在里面有一个关于安全的观点也适用这里，构建的安全系统的基础条件我们要相信它是安全的，不然谈安全毫无意义。互联网本身是安全的，出现了研究它的人才变得不安全。杠精与杠的区别，杠精只是一味地去杠，他不是为解决问题，而是单纯地看你不爽，而杠是基于事实去补充和完善那个观点，使它变得正确。关于云盘，我们首先要相信它的安全，然后它才能更好地为我们服务。工具是为了便利我们的生活，而不是为了拖累我们的生活，比如手机，它是通讯工具；电脑，它是帮助我们学习和工作的工具等等，它们的价值取决于便利和实用性，不应过多关注它们的属于你这个唯一属性这个点。 洞穴的比喻，我们都在洞穴的偏见中，而我们一生都在走出洞穴。 顶级红人，大把大把赚钱，这是大众容易看到的A面，可是我们应该更多地把目光放到极度痛苦、苦行僧般坚持的B面。正如美团的老板王兴所说：极度渴望成功的人不多，愿付非凡代价的人更少。 “每一个强大的人，都曾熬过一段不为人知、挣扎、痛苦的日子。过去了，这就是你的成人礼；过不去，求饶了，这就是你的无底洞。” ","date":"2022-10-11","objectID":"/posts/%E5%B0%86%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD%E8%87%B3onedrive/:0:0","tags":["博客"],"title":"将博客同步备份至onedrive","uri":"/posts/%E5%B0%86%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5%E5%A4%87%E4%BB%BD%E8%87%B3onedrive/"},{"categories":["文学"],"content":"如何阅读一本书？ 通读理想国，The Republic，一种政治制度，人的生活方式。 第一章 这一章主要探讨什么是正义？ 理想国是一本对话型书籍，柏拉图或借苏格拉底之口，或是自己之口说出或是探讨某一个观点。 全篇的开头“昨天，我跟阿里斯同的儿子格劳孔一块儿来到比雷埃夫斯港”，这里从‘昨天’时间点引入，走向明天之前应该思考昨天，苏格拉底说过所有的知识都是一种回忆。“一块儿来到”对应的英文版中是“walk down to”，苏格拉底是下到港口，从港口我们能想到船，航向，目标，家的方向；在理想国中有一个著名的洞穴比喻，我们生活在洞穴中，所看到的一切都是世界本原所折射的影子，苏格拉底是看到世界本原后重返洞穴，从本真世界回到看似繁华的洞穴，把思想去传递给人们，我们这一生都在走出洞穴，走在向上的道路上。格劳孔泛指普罗大众，苏格拉底愿意和年轻人去探讨问题，未来属于年轻人。 “我觉得当地居民的赛会似乎搞得很好，不过也不比色雷斯人搞得更好”，雅典和色雷斯人处于敌对关系，这里就引出了正义不仅仅是地方性问题，而是普遍性问题，对人人适用，不只是针对我们的亲朋好友，也包括陌生人、敌人等等。 ","date":"2022-10-10","objectID":"/posts/%E8%AF%BB%E7%90%86%E6%83%B3%E5%9B%BD-1/:0:0","tags":["理想国"],"title":"读理想国 1","uri":"/posts/%E8%AF%BB%E7%90%86%E6%83%B3%E5%9B%BD-1/"},{"categories":["文学"],"content":"读小学的时候，我的外祖母去世了。外祖母生前最疼爱我。我无法排除自己的忧伤，每天在学校的操场上一圈一圈地跑着，跑得累倒在地上，扑在草坪上痛哭。 那哀痛的日子持续了很久，爸爸妈妈也不知道如何安慰我。他们知道与其欺骗我说外祖母睡着了，还不如对我说实话：外祖母永远不会回来了。 “什么是永远不会回来了呢？”我问。 所有时间里的事物，都永远不会回来了。你的昨天过去了，它就永远变成昨天，你再也不能回到昨天了。爸爸以前和你一样小，现在再也不能回到你这么小的童年了。有一天你会长大，你也会像外祖母一样老，有一天你度过了你的所有时间，也会像外祖母一样永远不能回来了。”爸爸说。 爸爸等于给我说了一个谜，这个谜比“一寸光阴一寸金，寸金难买寸光阴”还让我感到可怕，比“光阴似箭，日月如梭”更让我有一种说不出的滋味。 以后，我每天放学回家，在庭院里看着太阳一寸一寸地沉进了山头，就知道一天真的过完了。虽然明天还会有新的太阳，但永远不会有今天的太阳了。 我看到鸟儿飞到天空，它们飞得多快呀。明天它们再飞过同样的路线，也永远不是今天了。或许明天飞过这条路线的，不是老鸟，而是小鸟了。 时间过得飞快，使我的小心眼里不只是着急，还有悲伤。有一天我放学回家，看到太阳快落山了，就下决心说：“我要比太阳更快地回家。”我狂奔回去，站在庭院里喘气的时候，看到太阳还露着半边脸，我高兴地跳起来。那一天我跑赢了太阳。以后我常做这样的游戏，有时和太阳赛跑，有时和西北风比赛，有时一个暑假的作业，我十天就做完了。那时我三年级，常把哥哥五年级的作业拿来做。每一次比赛胜过时间，我就快乐得不知道怎么形容。 后来的二十年里，我因此受益无穷。虽然我知道人永远跑不过时间，但是可以比原来跑快一步，如果加把劲，有时可以快好几步。那几步虽然很小很小，用途却很大很大。 如果将来我有什么要教给我的孩子，我会告诉他：假若你一直和时间赛跑，你就可以成功。 ","date":"2022-10-05","objectID":"/posts/%E5%92%8C%E6%97%B6%E9%97%B4%E8%B5%9B%E8%B7%91/:0:0","tags":null,"title":"和时间赛跑","uri":"/posts/%E5%92%8C%E6%97%B6%E9%97%B4%E8%B5%9B%E8%B7%91/"},{"categories":["经济学"],"content":"货币让世界变得更加紧密，从繁华渗透至蛮荒。 莎士比亚：金钱是个好士兵，有了它可以使人勇气百倍。 卢梭：我们手里的金钱是我们保持自由的工具。 马歇尔：语言表达我们的思想，货币表达我们的欲望和财产，给予我们更多的活力和热情，帮助人们达成目标。 货币给武平定价在很长时期都是针对有形物品。对脑力发明创造进行定价叫专利。 回避渐渐演变成资本，不再单纯的是定价单位。 货币对风险进行定价促成保、险期货交易，风险可以定价也可以买卖，用货币衡量自己可以长单的风险和收益。 货币对企业的定价叫股票、债券，从而形成交易市场，市场经济。 对国家：货币是经济发展的引擎；对普通人们：货币已经影响到我们的精神世界，左右我们的喜怒哀乐。 货币化可以创造财富，也可以让财富消失；货币可以实现梦想，也可以让梦想破灭；货币是欲望的载体，也必将是欲望的鸿沟。 它使人与人之间除了赤裸裸的利害关系。冷酷无情的金钱交易，再无其它。 过度货币化，把宗教虔诚骑士热忱小市民的伤感这些情感神圣发作淹没在利己打算中的冰水中。把人的尊严变成了交换价值，用一种没有良心的贸易自由代替了无数特许的和自立争得的自由，抹去了一切想来受人尊重的和令人敬畏的职业神圣光环，让这些职业变成被雇佣的劳动者，撕下了家庭房温情的面纱，变成了纯粹的金钱关系。 ","date":"2022-08-05","objectID":"/posts/%E9%80%9A%E4%BF%97%E7%BB%8F%E6%B5%8E%E5%AD%A6%E6%9C%89%E4%BB%B7%E6%98%9F%E7%90%83/:0:0","tags":null,"title":"通俗经济学：有价星球","uri":"/posts/%E9%80%9A%E4%BF%97%E7%BB%8F%E6%B5%8E%E5%AD%A6%E6%9C%89%E4%BB%B7%E6%98%9F%E7%90%83/"},{"categories":["Code"],"content":"1 集合类型及操作 集合类型定义 集合用{}表示，元素之间用逗号分离 集合中间每个元素唯一，不存在相同元素 集合元素之间无序 集合操作符 并运算S|T、交运算S\u0026T、差运算S-T、补运算S^T 关系操作符\u003e,\u003e=,\u003c,\u003c= 增强操作符：S ^= T，修改S 集合处理方法 S.add(x) #增加元素 S.discard(x) #删除元素，元素可以不是集合中的 S.remove(x) #移除元素，必须是在S中的 S.clear() #移除所有元素 S.pop() #随机取出（移除）一个元素，若空返回错误 S.copy() len(S) #返回S中元素个数 x in S # 判断x是否在S中 x not in S set(x) #将x类型转换为集合类型 集合类型应用场景 包含关系比较 数据去重： ls = ['p', 'p', 'y', 'y', '123'] s = set(ls) # 利用了集合无重复元素特点 lt = list(s) # 将集合转换为列表 ","date":"2022-07-31","objectID":"/posts/6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:0:1","tags":["python"],"title":"6.组合数据类型","uri":"/posts/6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Code"],"content":"2 序列类型及其操作 序列：一维元素向量，类型可以不同，由序号引导 衍生：字符串、元组类型、列表类型 序列处理函数及方法 x in s # 判断是否在s内 x not in s s + t # 连接两个序列 s * n 或 n * s # 将s复制n次 s[i] # 索引 s[i:j]或s[i:j:k] #切片操作，k是步长 取反操作：[::-1] len(s):返回长度 min(s) max(s) # 必须是可比较 s.index(x) 或s.index(x, i, j)# 第一个x出现的下标,整个序列或从i到j s.count(x) # x出现的次数 元组类型及操作 元组一旦被创建不能被修改，可以使用小括号也可不使用 return 1, 2 列表类型 列表类型创建后可修改，用[]或list()创建，元素间用逗号分隔，元素类型可以不同，五长度限制。 ls[i] = x ls[i:j:k] = lt del ls[i] del ls[i:j:k] ls += lt ls * n ls.append(x) # 列表末尾增加一个元素x ls.clear() ls.copy() ls.insert(i, x) # 在第i个位置后增加元素x ls.pop(i) # 取出第i位置元素并删除 ls.remove(x) # 第一个x删除 ls.reverse() # 将列表元素反转 序列类型应用场景 对数据的表达 转换为元组类型：lt = tuple(ls) #无法改变数据 对数据进行遍历 ","date":"2022-07-31","objectID":"/posts/6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:0:2","tags":["python"],"title":"6.组合数据类型","uri":"/posts/6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Code"],"content":"3 字典类型 映射：一种索引和数据之间的对应关系 序列：整合0-N的索引 映射类型：用户自定义的一种数据索引 字典类型是映射类型的体现，使用{}或dict()生成，键与数据之间用冒号隔开。 ex:d = {“中国”:“北京”, “法国”:“巴黎”} 字典类型应用场景 映射无处不在，键值无处不在，统计数据。 d.get(k, ) # 键K存在，则返回相应值，不存在，则返回default。 ","date":"2022-07-31","objectID":"/posts/6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:0:3","tags":["python"],"title":"6.组合数据类型","uri":"/posts/6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Code"],"content":"4 jieba库 中文分词第三方库,安装 pip install jieba 利用一个中文词库，确定汉字之间的关联概率，汉字见概率大的组成词组。 jieba.lcut(s) # 列表类型cut jieba.lcut(s, cut_all=True) # 全模式 jieba.lcut_for_search(s) # 搜索引擎模式 jieba.add_word(s) # 增加词 ","date":"2022-07-31","objectID":"/posts/6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/:0:4","tags":["python"],"title":"6.组合数据类型","uri":"/posts/6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"categories":["Code"],"content":"连续质数计算 描述 完成以下功能: 获得用户输入数字N，计算并输出从N开始的5个质数，单行输出，指数见用逗号分割。 # 连续输出5个质数 # 先定义质数判定函数 def prime(m): for i in range(2, m): if m % i == 0: return False else: return True count = 5 n = eval(input()) N = int(n) N = N + 1 if N \u003c n else N while count \u003e 0: if prime(N): if count \u003e 1: print(N, end=',') else: print(N, end='') count -= 1 # 因为要保证输出五个连续的质数，所以只有是质数时count-1，与if平级 #count -= 1 #print(count) N += 1 # 与第一个if平级 ","date":"2022-07-31","objectID":"/posts/5.xpython%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%BB%83%E4%B9%A0%E4%BA%8C/:0:1","tags":["python"],"title":"5.x Python函数和代码复用练习二","uri":"/posts/5.xpython%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%BB%83%E4%B9%A0%E4%BA%8C/"},{"categories":["Code"],"content":"随机密码生成 描述 补充编程模板中代码，完成以下功能： 以整数17为随机数种子，获取用户输入整数N为长度，产生3个长度为N位的密码，密码的每位是一个数字。每个密码单独一行输出。产生的密码采用random.ranfint()函数。 import random def genpwd(length): min = pow(10, length - 1) max = pow(10, length) -1 # 位数减1 return \"{}\".format(random.randint(a, b)) # 返回值到print length = eval(input()) random.seed(17) for i in range(3): print(genpwd(length)) ","date":"2022-07-30","objectID":"/posts/5.xpython%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%BB%83%E4%B9%A0%E4%B8%80/:0:0","tags":["python"],"title":"5.x Python函数和代码复用练习一","uri":"/posts/5.xpython%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8%E7%BB%83%E4%B9%A0%E4%B8%80/"},{"categories":["Code"],"content":"科赫曲线 科赫曲线绘制方法 一条直线均分为三段，去掉中间部分，然后在中间部分凸起一个等边三角形。下一阶科赫曲线时把上一阶的每条线段再做一次科赫变换。 n阶科赫曲线对n-1阶科赫曲线形成递归链条。 #kochDrawV1.py # 从N阶一直传递到0阶寻找答案，然后再返回每一阶的值 import turtle as t def koch(size, n): if n == 0: t.fd(size) else: for angle in [0, 60, -120, 60]: t.left(angle) koch(size/3, n-1) def main(): t.setup(600, 600) t.penup() t.goto(-200, 100) t.pendown() t.pensize(2) #koch(600, 3) #3阶科赫曲线 level = 3 koch(400, level) t.right(120) koch(400, level) t.right(120) koch(400, level) t.hideturtle() main() ","date":"2022-07-30","objectID":"/posts/5.5%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1%E5%B0%8F%E5%8C%85%E8%A3%B9/:0:1","tags":["python"],"title":"5.5 科赫雪花小包裹","uri":"/posts/5.5%E7%A7%91%E8%B5%AB%E9%9B%AA%E8%8A%B1%E5%B0%8F%E5%8C%85%E8%A3%B9/"},{"categories":["Code"],"content":"Pyinstaller库：将.py源代码封装成可执行文件 ","date":"2022-07-30","objectID":"/posts/5.4pyinstaller%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:0","tags":["python"],"title":"5.4 Pyinstaller库安装与使用","uri":"/posts/5.4pyinstaller%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Code"],"content":"Pyinstaller库使用 在.py文件目录下使用cmd命令 生成可执行文件命令 pyinstaller -F xx.py 清理打包临时文件 pyinstaller --clean xx.py 指定打包程序的图标文件icon pyinstaller -i \u003c图标文件名.ico\u003e -F xx.py ","date":"2022-07-30","objectID":"/posts/5.4pyinstaller%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:1","tags":["python"],"title":"5.4 Pyinstaller库安装与使用","uri":"/posts/5.4pyinstaller%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Code"],"content":"Pyinstaller库安装 pip install pyinstaller 报错 Collecting pyinstaller Downloading pyinstaller-5.2-py3-none-win32.whl (1.1 MB) |▌ | 20 kB 8.8 kB/s eta 0:02:05ERROR: Exception: Traceback (most recent call last): File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_vendor\\urllib3\\response.py\", line 438, in _error_catcher yield File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_vendor\\urllib3\\response.py\", line 519, in read data = self._fp.read(amt) if not fp_closed else b\"\" File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_vendor\\cachecontrol\\filewrapper.py\", line 62, in read data = self.__fp.read(amt) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\http\\client.py\", line 464, in read s = self.fp.read(amt) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\socket.py\", line 705, in readinto return self._sock.recv_into(b) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\ssl.py\", line 1273, in recv_into return self.read(nbytes, buffer) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\ssl.py\", line 1129, in read return self._sslobj.read(len, buffer) TimeoutError: The read operation timed out During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\cli\\base_command.py\", line 173, in _main status = self.run(options, args) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\cli\\req_command.py\", line 203, in wrapper return func(self, options, args) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\commands\\install.py\", line 315, in run requirement_set = resolver.resolve( File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\resolver.py\", line 94, in resolve result = self._result = resolver.resolve( File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_vendor\\resolvelib\\resolvers.py\", line 472, in resolve state = resolution.resolve(requirements, max_rounds=max_rounds) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_vendor\\resolvelib\\resolvers.py\", line 341, in resolve self._add_to_criteria(self.state.criteria, r, parent=None) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_vendor\\resolvelib\\resolvers.py\", line 172, in _add_to_criteria if not criterion.candidates: File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_vendor\\resolvelib\\structs.py\", line 151, in __bool__ return bool(self._sequence) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\found_candidates.py\", line 140, in __bool__ return any(self) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\found_candidates.py\", line 128, in \u003cgenexpr\u003e return (c for c in iterator if id(c) not in self._incompatible_ids) File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\found_candidates.py\", line 32, in _iter_built candidate = func() File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\factory.py\", line 204, in _make_candidate_from_link self._link_candidate_cache[link] = LinkCandidate( File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py\", line 295, in __init__ super().__init__( File \"C:\\Users\\kai\\AppData\\Local\\Programs\\Python\\Python310-32\\lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py\", line 156, in __init__ self.dist = self._prepare() File \"C:\\Users\\kai\\AppData\\Local","date":"2022-07-30","objectID":"/posts/5.4pyinstaller%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/:0:2","tags":["python"],"title":"5.4 Pyinstaller库安装与使用","uri":"/posts/5.4pyinstaller%E5%BA%93%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"},{"categories":["Code"],"content":"汉诺塔源于印度古老传说。其中规则如下：已知有三根柱子，其中一根柱子从上到下依次排列着N个圆盘，然后把该柱子上的圆盘，从下面开始按大小顺序重新摆放在另一根柱子上。同时，小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。 运用递归的思想去解决问题，首先我们先定义四个函数变量：圆盘数量N、起始柱、目标柱、中间柱。 第一步：当N=1时，需要一步，从起始柱到目标柱，即从A-\u003eC。 第二步：当N大于1时，首先将A上的N-1个圆盘移动到B上，把A上最后一个圆盘移动到C上，此时A是起始柱、B是目标柱、C是中间柱。 计数+1 第三步：将B上的N-1个圆盘移动到C上，递归关系建立完成，此时B是起始柱 、C是目标柱、A是中间柱。 2021年5月16日，中国龙岩的陈诺以29.328秒的成绩打破了6层汉诺塔吉尼斯世界纪录。 下面是在Python中建立递归函数求解6层汉诺塔问题，得出圆盘移动过程及移动的次数。 count = 0 def hanoi(n, src, dst, mid): global count if n == 1: print(\"{}:{}-\u003e{}\".format(1, src, dst)) count += 1 else: hanoi(n-1, src, mid, dst) print(\"{}:{}-\u003e{}\".format(n, src, dst)) count += 1 hanoi(n-1, mid, dst, src) hanoi(6,'A','C','B') print(count) -\u003e -\u003e -\u003e -\u003e -\u003e -\u003e -\u003e 1:A-\u003eB 2:A-\u003eC 1:B-\u003eC 3:A-\u003eB 1:C-\u003eA 2:C-\u003eB 1:A-\u003eB 4:A-\u003eC 1:B-\u003eC 2:B-\u003eA 1:C-\u003eA 3:B-\u003eC 1:A-\u003eB 2:A-\u003eC 1:B-\u003eC 5:A-\u003eB 1:C-\u003eA 2:C-\u003eB 1:A-\u003eB 3:C-\u003eA 1:B-\u003eC 2:B-\u003eA 1:C-\u003eA 4:C-\u003eB 1:A-\u003eB 2:A-\u003eC 1:B-\u003eC 3:A-\u003eB 1:C-\u003eA 2:C-\u003eB 1:A-\u003eB 6:A-\u003eC 1:B-\u003eC 2:B-\u003eA 1:C-\u003eA 3:B-\u003eC 1:A-\u003eB 2:A-\u003eC 1:B-\u003eC 4:B-\u003eA 1:C-\u003eA 2:C-\u003eB 1:A-\u003eB 3:C-\u003eA 1:B-\u003eC 2:B-\u003eA 1:C-\u003eA 5:B-\u003eC 1:A-\u003eB 2:A-\u003eC 1:B-\u003eC 3:A-\u003eB 1:C-\u003eA 2:C-\u003eB 1:A-\u003eB 4:A-\u003eC 1:B-\u003eC 2:B-\u003eA 1:C-\u003eA 3:B-\u003eC 1:A-\u003eB 2:A-\u003eC 1:B-\u003eC 63 一共需要移动63次。 ","date":"2022-07-30","objectID":"/posts/5.3python%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%87%BD%E6%95%B0%E5%A4%8D%E7%94%A8%E7%94%A8%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E6%B1%82%E8%A7%A3%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/:0:0","tags":["python"],"title":"5.3 Python代码与函数复用：用递归函数求解汉诺塔问题","uri":"/posts/5.3python%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%87%BD%E6%95%B0%E5%A4%8D%E7%94%A8%E7%94%A8%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0%E6%B1%82%E8%A7%A3%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"},{"categories":["Code"],"content":"python数码管程序举一反三，构建数码管倒计时 # 倒计时 # 模块化思维解决问题 import turtle as t #t.speed(10) 调节画笔快慢 def drawGap():#数码管间隔 t.penup() t.fd(5) def drawline(draw):#绘制线条 drawGap() t.pendown() if draw else t.penup() #draw真假两种取值 t.fd(40) drawGap() t.right(90) def drawDigit(digit): #绘制下半部分 drawline(True) if digit in [2, 3, 4, 5, 6, 8, 9] else drawline(False) drawline(True) if digit in [0, 1, 3, 4, 5, 6, 7, 8, 9] else drawline(False) drawline(True) if digit in [0, 2, 3, 5, 6, 8, 9] else drawline(False) drawline(True) if digit in [0, 2, 6, 8] else drawline(False) #绘制上半部分 t.left(90) drawline(True) if digit in [0, 4, 5, 6, 8, 9] else drawline(False) drawline(True) if digit in [0, 2, 3, 5, 6, 7, 8, 9] else drawline(False) drawline(True) if digit in [0, 1, 2, 3, 4, 7, 8, 9] else drawline(False) #调整方向 因为函数drawline每次都会右转90° t.right(180) t.penup() t.fd(20) def drawDate(): for i in range(10, -1, -1): t.hideturtle() for num in str(i): drawDigit(eval(num)) l = len(str(num)) * (5+40+5+20) #一个字符长度是1 t.penup() t.bk(l) t.clear() def main(): t.setup(800,350,200,200) #画布宽高，距屏幕左上角位置 t.penup() t.fd(-300) t.pensize(5) drawDate() t.write(\"BOOM !!!\", font=(\"Arial\", 50, \"bold\"))#字体 大小 加粗 t.hideturtle() t.done() main() ","date":"2022-07-30","objectID":"/posts/5.2python%E6%95%B0%E7%A0%81%E7%AE%A1%E7%BB%98%E5%88%B6%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89%E6%95%B0%E7%A0%81%E7%AE%A1%E5%80%92%E8%AE%A1%E6%97%B6/:0:0","tags":["python"],"title":"5.2.1 Python数码管绘制举一反三：数码管倒计时","uri":"/posts/5.2python%E6%95%B0%E7%A0%81%E7%AE%A1%E7%BB%98%E5%88%B6%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89%E6%95%B0%E7%A0%81%E7%AE%A1%E5%80%92%E8%AE%A1%E6%97%B6/"},{"categories":["Code"],"content":"利用python的turtle库来实现用7段数码管来显示时间 # 倒计时 import turtle as t #t.speed(10) 调节画笔快慢 def drawGap():#数码管间隔 t.penup() t.fd(5) def drawline(draw):#绘制线条 drawGap() t.pendown() if draw else t.penup() #draw真假两种取值 t.fd(40) drawGap() t.right(90) def drawDigit(digit): #绘制下半部分 drawline(True) if digit in [2, 3, 4, 5, 6, 8, 9] else drawline(False) drawline(True) if digit in [0, 1, 3, 4, 5, 6, 7, 8, 9] else drawline(False) drawline(True) if digit in [0, 2, 3, 5, 6, 8, 9] else drawline(False) drawline(True) if digit in [0, 2, 6, 8] else drawline(False) #绘制上半部分 t.left(90) drawline(True) if digit in [0, 4, 5, 6, 8, 9] else drawline(False) drawline(True) if digit in [0, 2, 3, 5, 6, 7, 8, 9] else drawline(False) drawline(True) if digit in [0, 1, 2, 3, 4, 7, 8, 9] else drawline(False) #调整方向 因为函数drawline每次都会右转90° t.right(180) t.penup() t.fd(20) def drawDate(): for i in range(10, -1, -1): t.hideturtle() for num in str(i): drawDigit(eval(num)) l = len(str(num)) * (5+40+5+20) #一个字符长度是1 t.penup() t.bk(l) t.clear() def main(): t.setup(800,350,200,200) #画布宽高，距屏幕左上角位置 t.penup() t.fd(-300) t.pensize(5) drawDate() t.write(\"BOOM !!!\", font=(\"Arial\", 50, \"bold\"))#字体 大小 加粗 t.hideturtle() t.done() main() ","date":"2022-07-30","objectID":"/posts/5.2python%E6%95%B0%E7%A0%81%E7%AE%A1%E7%BB%98%E5%88%B6/:0:0","tags":["python"],"title":"5.2 Python数码管绘制","uri":"/posts/5.2python%E6%95%B0%E7%A0%81%E7%AE%A1%E7%BB%98%E5%88%B6/"},{"categories":["Code"],"content":"# 圆周率计算 蒙特卡洛 import random import time darts = 1000*1000 # 影响运行时间 hits = 0.0 start = time.perf_counter() # 程序的花费时间大都在循环语句上 for i in range(1, darts+1): x, y = random.random(), random.random() dist = pow(x ** 2 + y ** 2, 0.5) if dist \u003c= 1.0: hits = hits + 1 pi = 4 * (hits/darts) print(\"圆周率的值：{}\".format(pi)) print(\"运行时间是：{:.5f}s\".format(time.perf_counter()-start)) ","date":"2022-07-29","objectID":"/posts/4.5pytho%E5%BE%AA%E7%8E%AF%E5%BA%94%E7%94%A8%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E5%9C%86%E5%91%A8%E7%8E%87/:0:0","tags":["python"],"title":"4.5 pytho循环应用：蒙特卡洛方法计算圆周率","uri":"/posts/4.5pytho%E5%BE%AA%E7%8E%AF%E5%BA%94%E7%94%A8%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E5%9C%86%E5%91%A8%E7%8E%87/"},{"categories":["Code"],"content":"# textbar.py # 渐变显示进度条 import time scale = 50 print(\"执行开始\".center(scale//2, \"-\")) # str.center(width, fillchar)宽度和填充字符 start = time.perf_counter() # 计时 for i in range(scale+1): p = i / scale power = (p + (1 - p)/2) ** 8 #函数 进度条设计 c = power * 100 a = '*' * int(c) b = '.' * (scale - int(c)) dur = time.perf_counter() - start print(\"\\r{:^3.0f}%[{}-\u003e{}]{:.2f}s\".format(c, a, b, dur), end=\"\") # ^数字居中符号 3.2前面是整数保留位数，后面是小数 time.sleep(0.1) print(\"\\n\"+\"执行结束\".center(scale//2, \"-\")) ","date":"2022-07-29","objectID":"/posts/3.5python%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89%E6%B8%90%E5%8F%98%E8%BF%9B%E5%BA%A6%E6%9D%A1/:0:0","tags":["python"],"title":"3.5 python文本进度条举一反三：渐变进度条","uri":"/posts/3.5python%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89%E6%B8%90%E5%8F%98%E8%BF%9B%E5%BA%A6%E6%9D%A1/"},{"categories":["Code"],"content":"# daydayupQ5.py # 三天打鱼两天晒网式学习 # def保留字用于定义函数,本次返回一个dayup值 def dayUP(df): dayup = 1 for i in range(365): if i % 3 in [1,2]: # 120120120.... dayup = dayup * (1 - 0.01) else: dayup = dayup * (1 + df) # 此处是自定义变量 return dayup # 严格缩进，与for语句是并行结构 给出返回值 dayfactor = 0.01 #dd = 1 A = pow(1+dayfactor, 365) #while dayUP(df) \u003c A: # 执行上面的for循环,NameError: name 'df' is not defined #while dayUP(dd) \u003c A: # 工作日努力值：0.010 while dayUP(dayfactor) \u003c A: dayfactor += 0.001 print(\"工作日努力值：{:.3f}\".format(dayfactor)) ","date":"2022-07-29","objectID":"/posts/3.2daydayup%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89/:0:0","tags":["python"],"title":"3.2 daydayup举一反三：三天打鱼两天晒网式学习","uri":"/posts/3.2daydayup%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89/"},{"categories":["Code"],"content":"#TempConvert.py TempStr = input(\"请输入带有符号的温度值:\") if TempStr[-1] in {'F','f'}: #这个字符串最后一个字符是否在这个列表里 C = (eval(TempStr[0:-1]) - 32) / 1.8 print(\"转换后的温度是{:.2f}C\".format(C)) elif TempStr[-1] in {'C','c'}: F = 1.8 * eval(TempStr[0:-1]) + 32 print(\"转换后的温度是{:.2f}F\".format(F)) else: print(\"输入有误\") ","date":"2022-07-29","objectID":"/posts/1.3python%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F/:0:0","tags":["python"],"title":"1.3 python温度转换程序","uri":"/posts/1.3python%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F/"},{"categories":null,"content":"交个朋友，为博客添加友链功能（还不完善，显示界面不美观），详情参看https://ziyue.tech/friend/ 有好的解决办法会继续在这里更新。 hugo博客文件架构： 注：以下操作均在你的本地博客根目录下进行（换了主题理论上依然可用） config.toml：所有的hugo站点都有一个全局配置文件，用来配置整个站点的信息，hugo默认提供了跟多配置指令。 content：站点下所有的内容页面，也就是我们创建的md文件都在这个content目录下面。 data：data目录用来存储网站用到一些配置、数据文件。文件类型可以是yaml|toml|json等格式。 layouts：存放用来渲染content目录下面内容的模版文件，模版.html格式结尾。 【layouts可以同时存储在项目目录和themes//layouts目录下（不建议）。】 static：用来存储图片、css、js等静态资源文件。 themes：用来存储主题，主题可以方便的帮助我们快速建立站点，也可以方便的切换网站的风格样式。 public：hugo编译后生成网站的所有文件都存储在这里面，把这个目录放到任意web服务器就可以发布网站成功。 首先，在博客根目录创建assets/css文件夹，在css文件夹下创建_page和_partial文件夹，在_page文件夹下创建_single.scss文件并填写以下内容(或者拷贝你主题文件夹下的该文件然后添加一句@import “../_partial/_single/friend”;） @import \"../_partial/_single/toc\"; @import \"../_partial/_single/friend\"; .single { .single-title { margin: 2rem 0 .5rem; font-size: 1.6rem; font-weight: bold; line-height: 140%; } .single-subtitle { margin: .5rem 0; font-size: 1.2rem; font-weight: normal; line-height: 100%; } .post-meta { font-size: .875rem; color: $global-font-secondary-color; span { display: inline-block; } [theme=dark] \u0026 { color: $global-font-secondary-color-dark; } @include link(false, true); .author { font-size: 1.05rem; } } .featured-image { margin: .5rem 0 1rem 0; img { display: block; max-width: 100%; height: auto; margin: 0 auto; overflow: hidden; } img.lazyloaded { width: 100%; } } .content { \u003e h2 { font-size: 1.5rem; \u0026 code { font-size: 1.25rem; } } \u003e h3 { font-size: 1.375rem; \u0026 code { font-size: 1.125rem; } } \u003e h4 { font-size: 1.25rem; \u0026 code { font-size: 1rem; } } \u003e h5 { font-size: 1.125rem; } \u003e h6 { font-size: 1rem; } h2, h3, h4, h5, h6 { font-weight: bold; margin: 1.2rem 0; [theme=dark] \u0026 { font-weight: bolder; } } \u003e h2, \u003e h3, \u003e h4, \u003e h5, \u003e h6 { \u003e .header-mark::before { content: \"|\"; margin-right: .3125rem; color: $single-link-color; [theme=dark] \u0026 { color: $single-link-color-dark; } } } \u003e h2 \u003e .header-mark::before { content: \"#\"; } p { margin: .5rem 0; } b, strong { font-weight: bold; [theme=dark] \u0026 { color: #ddd; } } @include link(false, false); a { @include overflow-wrap(break-word); [theme=dark] \u0026 b, [theme=dark] \u0026 strong { color: $single-link-color-dark; } } [theme=dark] a:hover b, [theme=dark] a:hover strong { color: $single-link-hover-color-dark; } ul, ol { margin: .5rem 0; padding-left: 2.5rem; } ul { list-style-type: disc; } ruby { background: $code-background-color; rt { color: $global-font-secondary-color; } [theme=dark] \u0026 { background: $code-background-color-dark; rt { color: $global-font-secondary-color-dark; } } } .table-wrapper { overflow-x: auto; \u0026::-webkit-scrollbar { background-color: $table-background-color; [theme=dark] \u0026 { background-color: $table-background-color-dark; } } \u003e table { width: 100%; max-width: 100%; margin: .625rem 0; border-spacing: 0; background: $table-background-color; border-collapse: collapse; [theme=dark] \u0026 { background: $table-background-color-dark; } thead { background: $table-thead-color; [theme=dark] \u0026 { background-color: $table-thead-color-dark; } } th, td { padding: .3rem 1rem; border: 1px solid darken($table-thead-color, 2%); [theme=dark] \u0026 { border-color: darken($table-thead-color-dark, 2%); } } } } img { max-width: 100%; min-height: 1em; } figure { margin: .5rem; text-align: center; .image-caption:not(:empty) { min-width: 20%; max-width: 80%; display: inline-block; padding: .5rem; margin: 0 auto; font-size: .875rem; color: #969696; } img { display: block; width: 100%; height: auto; margin: 0 auto; overflow: hidden; } } .lazyload, .lazyloading { @include object-fit(scale-down); } .lazyloaded { @include object-fit(fill); } blockquote { display: block; border-left: .5rem solid $blockquote-color; background-color: rgba($blockquote-color, .2); padding: .25rem .75rem; margin: 1rem 0; [theme=dark] \u0026 { border-left-color: $blockquote-color-dark; background-color: rgba($blockquote-color-dark, .2); } } .footnotes { color: $global-font-secondary-color; [theme=dark] \u0026 { color: $global-font-secondary-color-dark; } p { margin: .25rem 0; } } @import \"../_partial/","date":"2022-07-28","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%9B%9Bhugo%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE/:0:0","tags":["博客"],"title":"博客搭建四：hugo添加友链","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%9B%9Bhugo%E6%B7%BB%E5%8A%A0%E5%8F%8B%E9%93%BE/"},{"categories":null,"content":"博客搭建逐渐完善，博文内容也逐渐增多，添加搜索功能可以很方便的检索内容，对知识进行回顾，温故而知新。 ​实现hugo博客的内容检索利用的是algolia服务，首先，修改博客根目录下的 config.toml文件（而非主题文件下的，不然无法生成.josn文件），添加以下内容(粘贴至末尾即可）： [outputs] home = [\"HTML\",\"RSS\",\"TXT\",\"Algolia\"] section = [\"HTML\"] taxonomy = [\"HTML\"] term = [\"HTML\"] [outputFormats.Algolia] mediaType = \"application/json\" baseName = \"algolia\" isPlainText = true 在博客根目录/layouts创建_default文件夹，在该文件夹内创建list.algolia.json文件，用nop++或者其他软件打开该文件并添加以下内容： [ {{- range $index, $entry := .Site.RegularPages }} {{- if $index }}, {{ end }} { \"objectID\": {{ .File.TranslationBaseName }}, \"url\": {{ .Permalink | jsonify }}, \"title\": {{ .Title | jsonify }}, \"summary\": {{ .Summary | jsonify }}, \"content\": {{ .Plain | jsonify }}, \"pubDate\": {{ .PublishDate | jsonify }} } {{- end }} ] 注册algolia 按照注册指引流程走完然后打开设置，见下图。 # Search config # 搜索配置 [params.search] enable = true # type of search engine [\"lunr\", \"algolia\"] # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"algolia\" # max index length of the chunked content # 文章内容最长索引长度 contentLength = 4000 # placeholder of the search bar # 搜索框的占位提示语 placeholder = \"So一下\" # max number of results length # 最大结果数目 maxResultLength = 10 # snippet length of the result # 结果内容片段长度 snippetLength = 30 # HTML tag name of the highlight part in results # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"blog\" appID = \"xxx\" # 你的密钥 searchKey = \"xxx\" # 你的密钥 在博客根目录输入cmd命令： hugo ​ 然后会在public文件夹下生成algolia.json文件，我们需要将该文件提交到algolia，见下图。 至此初步搜索功能已经具备了（见下图)，能够满足日常使用需求，另外algolia免费版每月有10000次搜索体验。但是这样每次更新博客内容都需要手动提交algolia.json，才能搜索到新内容，也可以设置自动提交，可自行搜索相关设置。 ","date":"2022-07-28","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%89hugo%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/:0:0","tags":["博客"],"title":"博客搭建三：hugo添加搜索功能","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%89hugo%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"},{"categories":null,"content":"好的想法需要交流。 ​我们的博客已经搭建好了，可以再上面愉快的发文章，但是我们需要一个连接外界和别人交流的窗口，一如多年前QQ的四四方方的长条聊天框，拉近了我们彼此的联系。 评论系统的选择 每种评论体统都有各自的优缺点，这里选择gitalk评论系统，光从名字就知道它与GitHub有关。 ​首先，打开D:\\博客根目录\\themes\\LoveIt\\layouts\\posts里的single.html文件，在底部{- /* Comment */ -}}下面添加{ {{- partial “comment.html” . -}}，在D:\\博客根目录\\themes\\LoveIt\\layouts\\partials下创建gitalk.html文件，并复制粘贴进以下内容： {{ if .Site.Params.enableGitalk }} \u003cdiv id=\"gitalk-container\"\u003e\u003c/div\u003e \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"\u003e \u003cscript src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e const gitalk = new Gitalk({ clientID: '{{ .Site.Params.Gitalk.clientID }}', clientSecret: '{{ .Site.Params.Gitalk.clientSecret }}', repo: '{{ .Site.Params.Gitalk.repo }}', owner: '{{ .Site.Params.Gitalk.owner }}', admin: ['{{ .Site.Params.Gitalk.owner }}'], id: location.pathname, // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }); (function() { if ([\"localhost\", \"127.0.0.1\"].indexOf(window.location.hostname) != -1) { document.getElementById('gitalk-container').innerHTML = 'Gitalk comments not available by default when the website is previewed locally.'; return; } gitalk.render('gitalk-container'); })(); \u003c/script\u003e {{ end }} 我们先注册一个GitHub账号，然后创建一个空的仓库用来存放你的评论。仓库建完以后，从设置里选择开发者选项，然后建立一个OAuth Apps见下图。 上面两项要在主题配置文件修改： [params.page.comment.gitalk] enable = true # 启用评论功能 owner = \"c2h5oc2h5\" # 用户名 repo = \"changyan\" # 评论仓库名 clientId = \"xxx\" # 上图第一项 clientSecret = \"xxx\" # 上图第二项 最后两项是你GitHub pages 上你的博客域名，如果你和我一样绑定了域名，一定一定要把上面最后两项的地址填写你的域名，不然当你初始化评论时（第一次需要登录你的GitHub账号，在博客下面评论区的位置，登录一次以后就不用再登陆了），会跳转到你的博客首页。搭建完成如下图所示。 按照顺序设置下来基本不会遇到ERROR:NOT FOUND问题，至此评论系统就搭建好了。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%8Chugo%E6%B7%BB%E5%8A%A0gitalk%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/:0:0","tags":["博客"],"title":"博客搭建二：hugo添加gitalk评论功能","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%8Chugo%E6%B7%BB%E5%8A%A0gitalk%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"},{"categories":null,"content":"打算把写博客长期坚持下去，考虑到后面博文数量会慢慢增多，hexo框架会越来越捉襟见肘，于是把博客从hexo迁移至hugo。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:0","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"安装hugo 首先从GitHub上下载hugo，地址：https://github.com/gohugoio/hugo 根据自己的电脑下载相应的版本，下载下来后解压到一个文件目录（出于习惯最好选择全英文路径下吧）然后将hugo文件所在的路径地址添加到系统变量path中就可以使用了。不用安装！不用安装！不用安装！ ​在cmd命令中验证 hugo version 出现下面语句证明hugo可以正常使用了 Hugo Static Site Generator v0.70.0/extended windows/amd64 BuildDate: unknown ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:1","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"注册GitHub账号 新建一个空仓库，仓库名称：usename.github.io，为后面的GitHub pages做准备，如果随便起名，后面就不能把博客部署到GitHub上了。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:2","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"安装Git 我在博客搭建一中写了参见：http://t.csdn.cn/sSAIU 基本上下载下来一路下一步就可以了，然后将把git和你的仓库进行链接，这样才能把本地文件推送进你的博客仓库里。git的作用是把你的本地博客文件推送到GitHub pages上，这样别人就能通过站点地址访问到你的博客了，快乐源于分享。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:3","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"建立博客站点 在某一个文件夹目录下，运行cmd命令： hugo new site xxx # xxx为你为你的本地博客的名字，以后所有的文件都在这个目录下 然后该目录下就会生成一堆文件，这些都不用管，我们只关心content文件夹、theme文件夹和config.toml文件，这里面包含了我们的博文.md文件存放处，主题设置和hugo基础页面设置，例如改网站名作者名等等。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:4","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"选择一个博客主题 因为hugo没有带默认主题，也就没有博客页面，所以要先找一个博客主题，在hugo官网上或者GitHub上找都可以，然后按照不同的主题上面的操作指导进行即可，建议先选一个简单的，先把博客搭建起来，然后再慢慢选主题。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:5","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"新建一篇博文 hugo new posts/xxx.md 这样就会在content文件夹下生成posts文件夹，有些主题的某个标签会指向posts文件夹，最好创建以下，即不要直接hugo new xxx.md，不然可能会找不到你的博客内容。然后再该文件夹下生成xxx.md文件，该文件就是你后面编辑文章的文件，用你熟悉的markdown软件写内容就可以了。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:6","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"部署博客 在博客根目录下用cmd命令或直接git bash here 输入： hugo 会在博客根目录生成public文件夹，里面的文件就是我们要推送到仓库的文件。在该目录下用cmd命令或直接git bash here 。 ​第一次推送要先与仓库地址建立联系。 git init git commit -m \"first commit\" git branch -M main git remote add origin https://github.com/usename/usename.github.io.git # **注：这里要改成你的仓库地址，不然推送不成功** git push -u origin main 以后添加文章：在public文件夹下操作 git add . git commit -m \"add blog post\" git push 至此你的博客基本上就搭建好了，后面就是写博客和选主题了，至于主题如何选，就仁者见仁智者见智了。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:7","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"另： 1.如何更改网站图标, 浏览器配置？ apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在博客根目录 /static 目录即可， 可以在 https://realfavicongenerator.net/ 网站上将图片生成这些文件，部署到GitHub pages上时可能不会立即生效。 2.如何更新博客？ ​2.1 在博客根目录运行cmd命令 hugo new posts/新博文名字.md 2.2 编写博文内容 2.3 将博文部署到GitHub pages 在博客根目录的public文件里git bash huer git add . git commit -m \"更改说明（例如添加博客）add blog\" git push ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:8","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":["文学"],"content":"佚名 〔先秦〕 桃之夭夭，灼灼其华。之子于归，宜其室家。 桃之夭夭，有蕡其实。之子于归，宜其家室。 桃之夭夭，其叶蓁蓁。之子于归，宜其家人。 ","date":"2022-07-27","objectID":"/posts/%E6%A1%83%E5%A4%AD/:0:0","tags":["诗经"],"title":"桃夭","uri":"/posts/%E6%A1%83%E5%A4%AD/"},{"categories":null,"content":" kai\rA funny guy\r雨临Lewis的博客\r不想当写手的码农不是好咸鱼_(xз」∠)_\r...\r","date":"0001-01-01","objectID":"/friend/:0:0","tags":null,"title":"交个朋友","uri":"/friend/"}]