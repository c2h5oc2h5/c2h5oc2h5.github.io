[{"categories":null,"content":"为什么要搭建自己的博客呢？ 契机 对博文做个备份。 知乎莫名奇妙就限制了账号，也不说明原因，及时止损，将内容搬过来，留下点足迹。 话说封号不说明缘由的么，哎，人生苦短远离知乎 互联网不是法外之地，遵纪守法是义务！ C2H5OC2H5 好萌 ","date":"2022-07-27","objectID":"/posts/%E5%85%B3%E4%BA%8E%E6%88%91/:0:0","tags":null,"title":"写在前面","uri":"/posts/%E5%85%B3%E4%BA%8E%E6%88%91/"},{"categories":["Code"],"content":"# 圆周率计算 蒙特卡洛 import random import time darts = 1000*1000 # 影响运行时间 hits = 0.0 start = time.perf_counter() # 程序的花费时间大都在循环语句上 for i in range(1, darts+1): x, y = random.random(), random.random() dist = pow(x ** 2 + y ** 2, 0.5) if dist \u003c= 1.0: hits = hits + 1 pi = 4 * (hits/darts) print(\"圆周率的值：{}\".format(pi)) print(\"运行时间是：{:.5f}s\".format(time.perf_counter()-start)) ","date":"2022-07-29","objectID":"/posts/4.5pytho%E5%BE%AA%E7%8E%AF%E5%BA%94%E7%94%A8%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E5%9C%86%E5%91%A8%E7%8E%87/:0:0","tags":["python"],"title":"4.5 pytho循环应用：蒙特卡洛方法计算圆周率","uri":"/posts/4.5pytho%E5%BE%AA%E7%8E%AF%E5%BA%94%E7%94%A8%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97%E5%9C%86%E5%91%A8%E7%8E%87/"},{"categories":["Code"],"content":"# textbar.py # 渐变显示进度条 import time scale = 50 print(\"执行开始\".center(scale//2, \"-\")) # str.center(width, fillchar)宽度和填充字符 start = time.perf_counter() # 计时 for i in range(scale+1): p = i / scale power = (p + (1 - p)/2) ** 8 #函数 进度条设计 c = power * 100 a = '*' * int(c) b = '.' * (scale - int(c)) dur = time.perf_counter() - start print(\"\\r{:^3.0f}%[{}-\u003e{}]{:.2f}s\".format(c, a, b, dur), end=\"\") # ^数字居中符号 3.2前面是整数保留位数，后面是小数 time.sleep(0.1) print(\"\\n\"+\"执行结束\".center(scale//2, \"-\")) ","date":"2022-07-29","objectID":"/posts/3.5python%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89%E6%B8%90%E5%8F%98%E8%BF%9B%E5%BA%A6%E6%9D%A1/:0:0","tags":["python"],"title":"3.5 python文本进度条举一反三：渐变进度条","uri":"/posts/3.5python%E6%96%87%E6%9C%AC%E8%BF%9B%E5%BA%A6%E6%9D%A1%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89%E6%B8%90%E5%8F%98%E8%BF%9B%E5%BA%A6%E6%9D%A1/"},{"categories":["Code"],"content":"# daydayupQ5.py # 三天打鱼两天晒网式学习 # def保留字用于定义函数,本次返回一个dayup值 def dayUP(df): dayup = 1 for i in range(365): if i % 3 in [1,2]: # 120120120.... dayup = dayup * (1 - 0.01) else: dayup = dayup * (1 + df) # 此处是自定义变量 return dayup # 严格缩进，与for语句是并行结构 给出返回值 dayfactor = 0.01 #dd = 1 A = pow(1+dayfactor, 365) #while dayUP(df) \u003c A: # 执行上面的for循环,NameError: name 'df' is not defined #while dayUP(dd) \u003c A: # 工作日努力值：0.010 while dayUP(dayfactor) \u003c A: dayfactor += 0.001 print(\"工作日努力值：{:.3f}\".format(dayfactor)) ","date":"2022-07-29","objectID":"/posts/3.2daydayup%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89/:0:0","tags":["python"],"title":"3.2 daydayup举一反三：三天打鱼两天晒网式学习","uri":"/posts/3.2daydayup%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%89/"},{"categories":["Code"],"content":"#TempConvert.py TempStr = input(\"请输入带有符号的温度值:\") if TempStr[-1] in {'F','f'}: #这个字符串最后一个字符是否在这个列表里 C = (eval(TempStr[0:-1]) - 32) / 1.8 print(\"转换后的温度是{:.2f}C\".format(C)) elif TempStr[-1] in {'C','c'}: F = 1.8 * eval(TempStr[0:-1]) + 32 print(\"转换后的温度是{:.2f}F\".format(F)) else: print(\"输入有误\") ","date":"2022-07-29","objectID":"/posts/1.3python%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F/:0:0","tags":["python"],"title":"1.3 python温度转换程序","uri":"/posts/1.3python%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2%E7%A8%8B%E5%BA%8F/"},{"categories":null,"content":"博客搭建逐渐完善，博文内容也逐渐增多，添加搜索功能可以很方便的检索内容，对知识进行回顾，温故而知新。 实现hugo博客的内容检索利用的是algolia服务，首先，修改博客根目录下的 config.toml文件（而非主题文件下的，不然无法生成.josn文件），添加以下内容(粘贴至末尾即可）： [outputs] home = [\"HTML\",\"RSS\",\"TXT\",\"Algolia\"] section = [\"HTML\"] taxonomy = [\"HTML\"] term = [\"HTML\"] [outputFormats.Algolia] mediaType = \"application/json\" baseName = \"algolia\" isPlainText = true 在博客根目录/layouts创建_default文件夹，在该文件夹内创建list.algolia.json文件，用nop++或者其他软件打开该文件并添加以下内容： [ {{- range $index, $entry := .Site.RegularPages }} {{- if $index }}, {{ end }} { \"objectID\": {{ .File.TranslationBaseName }}, \"url\": {{ .Permalink | jsonify }}, \"title\": {{ .Title | jsonify }}, \"summary\": {{ .Summary | jsonify }}, \"content\": {{ .Plain | jsonify }}, \"pubDate\": {{ .PublishDate | jsonify }} } {{- end }} ] 注册algolia 按照注册指引流程走完然后打开设置，见下图。 # Search config # 搜索配置 [params.search] enable = true # type of search engine [\"lunr\", \"algolia\"] # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"algolia\" # max index length of the chunked content # 文章内容最长索引长度 contentLength = 4000 # placeholder of the search bar # 搜索框的占位提示语 placeholder = \"So一下\" # max number of results length # 最大结果数目 maxResultLength = 10 # snippet length of the result # 结果内容片段长度 snippetLength = 30 # HTML tag name of the highlight part in results # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"blog\" appID = \"xxx\" # 你的密钥 searchKey = \"xxx\" # 你的密钥 在博客根目录输入cmd命令： hugo 然后会在public文件夹下生成algolia.json文件，我们需要将该文件提交到algolia，见下图。 至此初步搜索功能已经具备了（见下图），能够满足日常使用需求，另外algolia免费版每月有10000次搜索体验。但是这样每次更新博客内容都需要手动提交algolia.json，才能搜索到新内容，也可以设置自动提交，可自行搜索相关设置。 ","date":"2022-07-28","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%89hugo%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/:0:0","tags":["博客"],"title":"博客搭建三：hugo添加搜索功能","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%89hugo%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"},{"categories":null,"content":"好的想法需要交流。 我们的博客已经搭建好了，可以再上面愉快的发文章，但是我们需要一个连接外界和别人交流的窗口，一如多年前QQ的四四方方的长条聊天框，拉近了我们彼此的联系。 评论系统的选择 每种评论体统都有各自的优缺点，这里选择gitalk评论系统，光从名字就知道它与GitHub有关。 首先，打开D:\\博客根目录\\themes\\LoveIt\\layouts\\posts里的single.html文件，在底部{- /* Comment */ -}}下面添加{ {{- partial “comment.html” . -}}，在D:\\博客根目录\\themes\\LoveIt\\layouts\\partials下创建gitalk.html文件，并复制粘贴进以下内容： {{ if .Site.Params.enableGitalk }} \u003cdiv id=\"gitalk-container\"\u003e\u003c/div\u003e \u003clink rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"\u003e \u003cscript src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e const gitalk = new Gitalk({ clientID: '{{ .Site.Params.Gitalk.clientID }}', clientSecret: '{{ .Site.Params.Gitalk.clientSecret }}', repo: '{{ .Site.Params.Gitalk.repo }}', owner: '{{ .Site.Params.Gitalk.owner }}', admin: ['{{ .Site.Params.Gitalk.owner }}'], id: location.pathname, // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }); (function() { if ([\"localhost\", \"127.0.0.1\"].indexOf(window.location.hostname) != -1) { document.getElementById('gitalk-container').innerHTML = 'Gitalk comments not available by default when the website is previewed locally.'; return; } gitalk.render('gitalk-container'); })(); \u003c/script\u003e {{ end }} 我们先注册一个GitHub账号，然后创建一个空的仓库用来存放你的评论。仓库建完以后，从设置里选择开发者选项，然后建立一个OAuth Apps见下图： 上面两项要在主题配置文件修改： [params.page.comment.gitalk] enable = true # 启用评论功能 owner = \"c2h5oc2h5\" # 用户名 repo = \"changyan\" # 评论仓库名 clientId = \"xxx\" # 上图第一项 clientSecret = \"xxx\" # 上图第二项 最后两项是你GitHub pages 上你的博客域名，如果你和我一样绑定了域名，一定一定要把上面最后两项的地址填写你的域名，不然当你初始化评论时（第一次需要登录你的GitHub账号，在博客下面评论区的位置，登录一次以后就不用再登陆了），会跳转到你的博客首页。搭建完成如下图所示。 按照顺序设置下来基本不会遇到ERROR:NOT FOUND问题，至此评论系统就搭建好了。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%8Chugo%E6%B7%BB%E5%8A%A0gitalk%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/:0:0","tags":["博客"],"title":"博客搭建二：hugo添加gitalk评论功能","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%BA%8Chugo%E6%B7%BB%E5%8A%A0gitalk%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"},{"categories":null,"content":"打算把写博客长期坚持下去，考虑到后面博文数量会慢慢增多，hexo框架会越来越捉襟见肘，于是把博客从hexo迁移至hugo。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:0","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"安装hugo 首先从GitHub上下载hugo，地址：https://github.com/gohugoio/hugo 根据自己的电脑下载相应的版本，下载下来后解压到一个文件目录（出于习惯最好选择全英文路径下吧）然后将hugo文件所在的路径地址添加到系统变量path中就可以使用了。 不用安装！ 不用安装！ 不用安装！ 在cmd命令中验证： hugo version 出现下面语句证明hugo可以正常使用了 Hugo Static Site Generator v0.70.0/extended windows/amd64 BuildDate: unknown ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:1","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"注册GitHub账号 新建一个空仓库，仓库名称：usename.github.io，为后面的GitHub pages做准备，如果随便起名，后面就不能把博客部署到GitHub上了。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:2","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"安装Git 我在博客搭建一中写了参见：http://t.csdn.cn/sSAIU 基本上下载下来一路下一步就可以了，然后将把git和你的仓库进行链接，这样才能把本地文件推送进你的博客仓库里。git的作用是把你的本地博客文件推送到GitHub pages上，这样别人就能通过站点地址访问到你的博客了，快乐源于分享。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:3","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"建立博客站点 在某一个文件夹目录下，运行cmd命令： hugo new site xxx # xxx为你为你的本地博客的名字，以后所有的文件都在这个目录下 然后该目录下就会生成一堆文件，这些都不用管，我们只关心content文件夹、theme文件夹和config.toml文件，这里面包含了我们的博文.md文件存放处，主题设置和hugo基础页面设置，例如改网站名作者名等等。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:4","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"选择一个博客主题 因为hugo没有带默认主题，也就没有博客页面，所以要先找一个博客主题，在hugo官网上或者GitHub上找都可以，然后按照不同的主题上面的操作指导进行即可，建议先选一个简单的，先把博客搭建起来，然后再慢慢选主题。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:5","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"新建一篇博文 hugo new posts/xxx.md 这样就会在content文件夹下生成posts文件夹，有些主题的某个标签会指向posts文件夹，最好创建以下，即不要直接hugo new xxx.md，不然可能会找不到你的博客内容。然后再该文件夹下生成xxx.md文件，该文件就是你后面编辑文章的文件，用你熟悉的markdown软件写内容就可以了。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:6","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":null,"content":"部署博客 在博客根目录下用cmd命令或直接git bash here 输入： hugo 会在博客根目录生成public文件夹，里面的文件就是我们要推送到仓库的文件。在该目录下用cmd命令或直接git bash here 。 第一次推送要先与仓库地址建立联系： git init git commit -m \"first commit\" git branch -M main git remote add origin https://github.com/usename/usename.github.io.git # **注：这里要改成你的仓库地址，不然推送不成功** git push -u origin main 以后添加文章： 在public文件夹下操作 git add . git commit -m \"add blog post\" git push 至此你的博客基本上就搭建好了，后面就是写博客和选主题了，至于主题如何选，就仁者见仁智者见智了。 ","date":"2022-07-27","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/:0:7","tags":["博客"],"title":"博客搭建一：hugo","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%80hugo/"},{"categories":["文学"],"content":"佚名 〔先秦〕 桃之夭夭，灼灼其华。之子于归，宜其室家。 桃之夭夭，有蕡其实。之子于归，宜其家室。 桃之夭夭，其叶蓁蓁。之子于归，宜其家人。 ","date":"2022-07-27","objectID":"/posts/%E6%A1%83%E5%A4%AD/:0:0","tags":["诗经"],"title":"桃夭","uri":"/posts/%E6%A1%83%E5%A4%AD/"},{"categories":null,"content":"kai\rA funny guy\r\r\r","date":"0001-01-01","objectID":"/friend/:0:0","tags":null,"title":"友链","uri":"/friend/"}]